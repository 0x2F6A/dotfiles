# --------------------------------- Autoloads ---------------------------------
# Use colors
autoload -U colors && colors
# System completion init
autoload -Uz compinit
compinit
# bashcompinit
autoload -U bashcompinit
bashcompinit
# Enabling Portage completions and Gentoo prompt for zsh
autoload promptinit
promptinit

# -------------------------------- Self config --------------------------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}



# ---------------------------------- Plugins ----------------------------------
# Znap plugin manager

# Download Znap, if it's not there yet.
[[ -r ~/.znap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/.znap
source ~/.znap/znap.zsh  # Start Znap

zstyle ':znap:*' repos-dir ~/.znap

#
# Plugins
#

# Because your terminal should be able to perform tasks asynchronously without external tools!
znap eval zsh-async 'curl -fsSL \
    https://raw.githubusercontent.com/mafredri/zsh-async/master/async.zsh'
# Replace zsh's default completion selection menu with fzf!
znap source Aloxaf/fzf-tab

# Additional completion definitions for Zsh.
znap install zsh-users/zsh-completions

# The plugin configures and delivers completions
znap install z-shell/zsh-fancy-completions
# Replace zsh's default completion selection menu with fzf!
# znap install zdharma-continuum/fast-syntax-highlighting
# Zsh plugin to replace command gnu/ls with eza
# znap install z-shell/zsh-eza
# Zsh plugin replace GNU/ls with next generation Peltoche/lsd
znap source z-shell/zsh-lsd
#  Feature-rich Syntax Highlighting for Zsh
znap source z-shell/F-Sy-H
# History search for multiple words
# znap install z-shell/H-S-MW

# Fish-like syntax highlighting for Zsh.
# zsh-users/zsh-syntax-highlighting must be sourced after completion
# znap install zsh-users/zsh-syntax-highlighting
# Fish-like history search (up arrow) for Zsh.
# zsh-users/zsh-history-substring-search must be sourced after zsh-users/zsh-syntax-highlighting
znap source zsh-users/zsh-history-substring-search
# Fish-like autosuggestions for Zsh.
znap source zsh-users/zsh-autosuggestions

znap eval omz-sudo 'curl -fsSL \
    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/sudo/sudo.plugin.zsh'
znap eval omz-command-not-found 'curl -fsSL \
    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/command-not-found/command-not-found.plugin.zsh'
znap eval omz-asdf 'curl -fsSL \
    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/asdf/asdf.plugin.zsh'

# Auto-close and delete matching delimiters in zsh
znap source hlissner/zsh-autopair

# ZSH plugin to automatically switch python virtualenvs
# (including pipenv and poetry) as you move between directories
znap eval auto-venv 'curl -fsSL \
    https://raw.githubusercontent.com/MichaelAquilina/zsh-autoswitch-virtualenv/master/autoswitch_virtualenv.plugin.zsh'


#
# Plugin config
#

#
# Fzf - A command-line fuzzy finder
#

zstyle ':fzf-tab:complete:*:*' fzf-flags --height=100% --preview-window=right:wrap

zstyle ':completion::complete:*' use-cache 1

# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza --git -1 --color=always $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza --git -1 --color=always $realpath'
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# show systemd unit status
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'

# give a preview of commandline arguments when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview \
    '[[ $group == "[process ID]" ]] && ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap

# environment variable
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-preview 'echo ${(P)word}'

# git | it is an example. you can change it
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
    'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
    'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
    'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
    'case "$group" in
  "commit tag") git show --color=always $word ;;
  *) git show --color=always $word | delta ;;
esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
    'case "$group" in
  "modified file") git diff $word | delta ;;
  "recent commit object name") git show --color=always $word | delta ;;
  *) git log --color=always $word ;;
esac'

# tldr
zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'

# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

# commands
zstyle ':fzf-tab:complete:-command-:*' fzf-preview \
    '(out=$(tldr --color always "$word") 2>/dev/null && echo $out) || (out=$(MANWIDTH=$FZF_PREVIEW_COLUMNS man "$word") 2>/dev/null && echo $out) || (out=$(which "$word") && echo $out) || echo "${(P)word}"'

# show file content
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
export LESSOPEN='|~/.local/bin/lessfilter %s'

# enable tmux popup
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
# apply to all command
zstyle ':fzf-tab:*' popup-min-size 50 8
# only apply to 'diff'
zstyle ':fzf-tab:complete:diff:*' popup-min-size 80 12

# -------------------------------- Environments -------------------------------
LOCALLIB="$HOME/.local/lib"
LOCALSHARE="$HOME/.local/share"

# Eliminate duplicate entries in history
setopt HIST_IGNORE_DUPS

export EDITOR="nvim"
export PAGER="bat"
export MANPAGER="bat"

# Binary files path
export PATH="$HOME/.local/bin:$PATH"

# Nix user's packages binary
export PATH="$HOME/.nix-profile/bin:$PATH"

# Go language environment
export GOMODCACHE="$HOME/.cache/go/pkg/mod"
export GOPATH="$LOCALLIB/go"
export GOBIN="$LOCALLIB/go/bin"
export GO111MODULE=on
export PATH="$(go env GOBIN):$(go env GOPATH)/bin:$PATH"

# Cargo - Rust Package manager
export PATH="$HOME/.cargo/bin:$PATH"

# NPM -- node package manager
export npm_config_prefix="$HOME/.local"

# PNPM -- Fast, disk space efficient package manager
export PNPM_HOME="$LOCALSHARE/pnpm"
case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# luarocks -- lua package manager
export PATH="$HOME/.luarocks/bin:$PATH"

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Wasmer
export WASMER_DIR="$HOME/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

# Binary files path
export PATH="$HOME/.local/bin:$PATH"

# Doom emacs
export PATH="$HOME/.config/emacs/bin:$PATH"

# ----------------------------------- Evals -----------------------------------
# Use zoxide to replace cd command
znap eval zoxide "zoxide init zsh --cmd cd"
# Enable starship
if [[ $TERM != "linux" ]]; then
    znap eval starship "starship init zsh"
fi
# Thefuch plugin
znap eval thefuck "thefuck --alias"
# navi -- An interactive cheatsheet tool for the command-line
znap eval navi "navi widget zsh"
# fnm -- NodeJS version manager written by Rust
znap eval fnm "fnm env --use-on-cd"
# pipx -- Install and Run Python Applications in Isolated Environments
znap eval pipx "register-python-argcomplete pipx"
# atuin -- Magic shell history
znap eval atuin "atuin init zsh --disable-up-arrow"
# ----------------------------------- Alias -----------------------------------
alias code="/usr/bin/code --enable-features=UseOzonePlatform --ozone-platform=wayland --new-window"
# --------------------------------- Functions ---------------------------------
# Enable Transient Prompt
function zle-line-init {
    emulate -L zsh

    [[ $CONTEXT == start ]] || return 0

    while true; do
        zle .recursive-edit
        local -i ret=$?
        [[ $ret == 0 && $KEYS == $'\4' ]] || break
        [[ -o ignore_eof ]] || exit 0
    done

    local saved_prompt=$PROMPT
    local saved_rprompt=$RPROMPT
    PROMPT='$fg[green]‚ùØ '
    RPROMPT=''
    zle .reset-prompt
    PROMPT=$saved_prompt
    RPROMPT=$saved_rprompt

    if ((ret)); then
        zle .send-break
    else
        zle .accept-line
    fi
    return ret
}
zle -N zle-line-init
