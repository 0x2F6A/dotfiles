# -----------------
# Zsh configuration
# -----------------


#
# Znap plugin manager
#

# Download Znap, if it's not there yet.
[[ -r ~/.znap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/.znap
source ~/.znap/znap.zsh  # Start Znap
zstyle ':znap:*' repos-dir "$HOME/.znap/repos"


#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

#
# Environments
#
LOCALLIB="$HOME/.local/lib"
LOCALSHARE="$HOME/.local/share"

export EDITOR="nvim"
export PAGER="bat"
export MANPAGER="bat"

# Binary files path
export PATH="$HOME/.local/bin:$PATH"

# Nix user's packages binary
export PATH="$HOME/.nix-profile/bin:$PATH"

# Go language environment
export GOMODCACHE="$HOME/.cache/go/pkg/mod"
export GOPATH="$LOCALLIB/go"
export GOBIN="$LOCALLIB/go/bin"
export GO111MODULE=on
export PATH="$(go env GOBIN):$(go env GOPATH)/bin:$PATH"

# Cargo - Rust Package manager
export PATH="$HOME/.cargo/bin:$PATH"

# NPM -- node package manager
export npm_config_prefix="$HOME/.local"

# luarocks -- lua package manager
export PATH="$HOME/.luarocks/bin:$PATH"

# Composer -- PHP package manager
export PATH="$HOME/.composer/vendor/bin:$PATH"

# Gem -- Ruby package manager
export GEM_HOME="$(gem env user_gemhome)"
export PATH="$GEM_HOME/bin:$PATH"

# dotnet
export PATH="$HOME/.dotnet/tools:$PATH"

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# deno
export PATH="$HOME/.deno/bin:$PATH"

# Wasmer
export WASMER_DIR="$HOME/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# Binary files path
export PATH="$HOME/.local/bin:$PATH"

# Doom emacs
export PATH="$HOME/.config/emacs/bin:$PATH"

#
# Plugin manage
#

znap eval starship "starship init zsh --print-full-init"
znap prompt

znap source mafredri/zsh-async
if command -v fzf &>/dev/null; then
  znap source Aloxaf/fzf-tab
fi

znap install zsh-users/zsh-completions \
             z-shell/zsh-fancy-completions

znap source zdharma-continuum/fast-syntax-highlighting
znap source z-shell/zsh-lsd

znap source zsh-users/zsh-history-substring-search
znap source zsh-users/zsh-autosuggestions

znap source hlissner/zsh-autopair
znap source MichaelAquilina/zsh-autoswitch-virtualenv

znap source wfxr/forgit

znap source ohmyzsh/ohmyzsh plugins/{asdf,command-not-found,direnv,dnf,dotnet,extract,sudo}

znap eval zoxide-cd "zoxide init zsh --cmd cd"
znap eval thefuck "thefuck --alias"
znap eval navi "navi widget zsh"
znap eval fnm "fnm env --use-on-cd"
znap eval pipx "register-python-argcomplete pipx"
znap eval atuin "atuin init zsh --disable-up-arrow"
znap eval coursier "cs install --env"

# Generated complete functions
znap fpath _deno   "deno   completions zsh"
znap fpath _rustup "rustup completions zsh"
znap fpath _cargo  "rustup completions zsh cargo"
znap fpath _docker "docker completion zsh"
znap fpath _ng     "ng completion script"

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key


# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)



# ------------------------------
# Post-init module configuration
# ------------------------------

#
# Fzf - A command-line fuzzy finder
#

zstyle ':fzf-tab:complete:*:*' fzf-flags --height=100% --preview-window=right:wrap

zstyle ':completion::complete:*' use-cache 1

# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza --git -1 --color=always $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza --git -1 --color=always $realpath'
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# show systemd unit status
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'

# give a preview of commandline arguments when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview \
    '[[ $group == "[process ID]" ]] && ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap

# environment variable
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-preview 'echo ${(P)word}'

# git | it is an example. you can change it
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
    'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
    'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
    'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
    'case "$group" in
  "commit tag") git show --color=always $word ;;
  *) git show --color=always $word | delta ;;
esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
    'case "$group" in
  "modified file") git diff $word | delta ;;
  "recent commit object name") git show --color=always $word | delta ;;
  *) git log --color=always $word ;;
esac'

# tldr
zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'

# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

# commands
zstyle ':fzf-tab:complete:-command-:*' fzf-preview \
    '(out=$(tldr --color always "$word") 2>/dev/null && echo $out) || (out=$(MANWIDTH=$FZF_PREVIEW_COLUMNS man "$word") 2>/dev/null && echo $out) || (out=$(which "$word") && echo $out) || echo "${(P)word}"'

# show file content
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
export LESSOPEN='|~/.local/bin/lessfilter %s'

# enable tmux popup
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
# apply to all command
zstyle ':fzf-tab:*' popup-min-size 50 8
# only apply to 'diff'
zstyle ':fzf-tab:complete:diff:*' popup-min-size 80 12


#
# Aliases
#
alias code="/usr/bin/code --enable-features=UseOzonePlatform --ozone-platform=wayland --new-window"

#
# Functions
#

# Enable Transient Prompt
function zle-line-init {
    emulate -L zsh

    [[ $CONTEXT == start ]] || return 0

    while true; do
        zle .recursive-edit
        local -i ret=$?
        [[ $ret == 0 && $KEYS == $'\4' ]] || break
        [[ -o ignore_eof ]] || exit 0
    done

    local saved_prompt=$PROMPT
    local saved_rprompt=$RPROMPT
    PROMPT='$fg[green]‚ùØ '
    RPROMPT=''
    zle .reset-prompt
    PROMPT=$saved_prompt
    RPROMPT=$saved_rprompt

    if ((ret)); then
        zle .send-break
    else
        zle .accept-line
    fi
    return ret
}
zle -N zle-line-init
